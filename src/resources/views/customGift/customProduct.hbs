<div class=" mt-5">


  <h1 class="text-center mb-4">T·∫°o h·ªôp qu√† c·ªßa b·∫°n</h1>
  <ul class=" container nav nav-tabs mb-4">

    <li class="nav-item">
      <a class="nav-link" id="step1-tab" href="/custom-gifts/gift">H∆∞·ªõng d·∫´n</a>
    </li>


    <li class="nav-item">
      <a class="nav-link active" id="step2-tab" data-bs-toggle="tab" href="">B∆∞·ªõc 1: Ch·ªçn s·∫£n ph·∫©m</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" id="step3-tab" href="/custom-gifts/box">B∆∞·ªõc 2: Ch·ªçn H·ªôp qu√† t·∫∑ng</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" id="step4-tab"  href="/custom-gifts/mes">B∆∞·ªõc 3: Th√™m tin nh·∫Øn c√° nh√¢n</a>
    </li>
  </ul>



  <div class="container ">


    <div class="row justify-content-center">
      <div class="col-md-6 text-center">
        <div id="selected-products" class="selected-summary">
          <h5>Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn.</h5>
        </div>
      </div>
    </div>


    <div class="text-center mt-3">
      <a href="/custom-gifts/gift">
        <button class="btn btn-secondary next" onclick="goToStep(1)">B∆∞·ªõc tr∆∞·ªõc</button>
      </a>
      <a href="/custom-gifts/box">
        <button class="btn btn-primary next" onclick="goToStep(2)">B∆∞·ªõc ti·∫øp theo</button>
      </a>
    </div>




    <!-- Search Bar -->
    <div class="container my-3">
      <div class="input-group">
        <input id="searchInput" type="text" class="form-control" placeholder="Search for products"
          aria-label="Search" />
        <button class="btn btn-outline-warning" onclick="searchProducts()">T√¨m ki·∫øm</button>
      </div>
    </div>




    <!-- Regular Products Section -->
    <div id="regularProducts" class="product-section" style="display: block;">
      <h2 class="text-center mt-5 mb-4">S·∫£n ph·∫©m th√¥ng th∆∞·ªùng</h2>
      <div class="row">

        {{#if products.length}}
        {{#each products}}
        <div class="col-md-4 mb-4">

          <div class="card">
            <img src="{{this.image}}" class="card-img-top" alt="{{this.name}}">
            <div class="card-body">
              <h5 class="card-title">{{this.name}}</h5>
              <p class="card-text">{{this.description}}</p>
              <p class="card-text"><strong>Gi√°:</strong><span class="price-display">{{this.price}}</span> </p>


              <div class="product-quantity-container">
                <input type="hidden" class="item-id" value="{{this._id}}">
                <button class="btn-minus" data-action="subtract" data-product-id="{{this._id}}"
                  data-product-name="{{this.name}}" data-product-price="{{this.price}}">-</button>

                <span class="quantity-display" data-product-id="{{this._id}}">
                  {{findQuantity customBox.items this._id}}
                </span>

                <button class="btn-plus" data-action="add" data-product-id="{{this._id}}"
                  data-product-name="{{this.name}}" data-product-price="{{this.price}}">+</button>
              </div>


            </div>
          </div>

        </div>
        {{/each}}
        {{else}}
        <p>Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m trong kho</p>
        {{/if}}

        <!-- Additional products here -->
      </div>
    </div>





    <script>

      // üè∑Ô∏è Chuy·ªÉn s·ªë th√†nh "299.000 VND"
      

      

      function saveToSessionStorage(items) {
        sessionStorage.setItem("selectedProducts", JSON.stringify(items));
      }

      function saveQuantityToSessionStorage(items) {
        const quantityData = {};
        items.forEach(item => {
          quantityData[item.productId._id] = item.quantity;
        });
        sessionStorage.setItem("selectedQuantities", JSON.stringify(quantityData));
      }





      document.querySelectorAll(".btn-minus").forEach((button) => {
        button.addEventListener("click", async (event) => {
          const container = event.target.closest(".product-quantity-container");
          const itemId = container.querySelector(".item-id").value;

          try {
            const response = await fetch("/custom-gifts/minus", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ itemId }),
            });

            const result = await response.json();

            if (result.success) {
              const quantityDisplay = container.querySelector(".quantity-display");
              const updatedItem = result.customBox.items.find(
                (item) => item.productId._id === itemId
              );
              quantityDisplay.textContent = updatedItem ? updatedItem.quantity : 0;

              saveQuantityToSessionStorage(result.customBox.items);
              saveToSessionStorage(result.customBox.items);
              // G·ªçi h√†m ƒë·ªÉ hi·ªÉn th·ªã l·∫°i to√†n b·ªô danh s√°ch ƒë√£ ch·ªçn
              renderSelectedItems(result.customBox.items);

            } else {
              alert(result.message);
            }
          } catch (error) {
            console.error("Error:", error);
            alert("C√≥ l·ªói x·∫£y ra.");
          }
        });
      });



      document.querySelectorAll(".btn-plus").forEach((button) => {
        button.addEventListener("click", async (event) => {
          const container = event.target.closest(".product-quantity-container");
          const itemId = container.querySelector(".item-id").value;

          try {
            const response = await fetch("/custom-gifts/plus", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ itemId }),
            });

            const result = await response.json();

            if (result.success) {
              const quantityDisplay = container.querySelector(".quantity-display");
              const updatedItem = result.customBox.items.find(
                (item) => item.productId._id === itemId
              );
              quantityDisplay.textContent = updatedItem ? updatedItem.quantity : 0;



              saveQuantityToSessionStorage(result.customBox.items);
              // C·∫≠p nh·∫≠t sessionStorage
              saveToSessionStorage(result.customBox.items);

              // G·ªçi h√†m ƒë·ªÉ hi·ªÉn th·ªã l·∫°i to√†n b·ªô danh s√°ch ƒë√£ ch·ªçn
              renderSelectedItems(result.customBox.items);

            } else {
              alert(result.message);
            }
          } catch (error) {
            console.error("Error:", error);
            alert("C√≥ l·ªói x·∫£y ra.");
          }
        });
      });




      function renderSelectedItems(items) {
        const container = document.getElementById("selected-products");
        if (!container) return;

        // N·∫øu kh√¥ng c√≥ items ho·∫∑c m·∫£ng r·ªóng
        if (!items || items.length === 0) {
          container.innerHTML = '<h5>Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn.</h5>';
          sessionStorage.removeItem("selectedProducts");
          return;
        }

        // C√≥ items => render
        let html = '';
        items.forEach(item => {
          // item.productId.name, item.quantity, item.productId.price ...
         const name = item.productId.name;
const qty = item.quantity;
const price = item.productId.price; 

// Chuy·ªÉn price v·ªÅ s·ªë
const priceNumber = Number(price.toString().replace(/\./g, "").replace(/,/g, "")); 
const total = qty * priceNumber;

html += `<p>${name} - S·ªë l∆∞·ª£ng: ${qty} - T·ªïng: ${total.toLocaleString()}</p>`;

        });

        container.innerHTML = html;
        sessionStorage.setItem("selectedProducts", JSON.stringify(items));
      }









      /**************************/


      window.addEventListener("DOMContentLoaded", () => {
        if (sessionStorage.getItem("selectedQuantities")) {
          console.log("Kh√¥i ph·ª•c s·ªë l∆∞·ª£ng t·ª´ sessionStorage.");
          const storedQuantities = JSON.parse(sessionStorage.getItem("selectedQuantities"));

          document.querySelectorAll(".quantity-display").forEach(span => {
            const productId = span.getAttribute("data-product-id");
            if (storedQuantities[productId] !== undefined) {
              span.textContent = storedQuantities[productId];
            }
          });

          // Kh√¥i ph·ª•c gi·ªè h√†ng
          if (sessionStorage.getItem("selectedProducts")) {
            renderSelectedItems(JSON.parse(sessionStorage.getItem("selectedProducts")));
          }
        }
      });




      document.querySelectorAll("a.nav-link").forEach(link => {
        link.addEventListener("click", (event) => {
          const href = event.target.getAttribute("href");
          if (href && !href.startsWith("/custom-gifts")) {

            sessionStorage.removeItem("selectedProducts");
            sessionStorage.removeItem("selectedQuantities");
          }
        });
      });




      window.addEventListener("load", async () => {
        if (sessionStorage.getItem("selectedProducts")) {

          renderSelectedItems(JSON.parse(sessionStorage.getItem("selectedProducts")));
          return;
        }

        try {
          const response = await fetch("/custom-gifts/reset-cart", { method: "POST" });
          const data = await response.json();
          console.log("Gi·ªè h√†ng ƒë√£ reset:", data.message);
        } catch (error) {
          console.error("L·ªói reset gi·ªè h√†ng:", error);
        }
      });






      /****************************************/



      function showProducts(section) {
        const regularProducts = document.getElementById('regularProducts');


        // Remove active class and reset color for all tabs
        document.querySelectorAll('.nav-tabs .nav-link').forEach(tab => {
          tab.classList.remove('active');
          tab.style.color = 'black'; // ƒê·∫∑t l·∫°i m√†u cho tab kh√¥ng active
        });

        // Add active class and set color to dark red for the active tab
        const activeTab = document.querySelector(`.nav-tabs .nav-link[onclick="showProducts('${section}')"]`);
        activeTab.classList.add('active');
        activeTab.style.color = '#8B0000'; // M√†u huy·∫øt
      }

      function searchProducts() {
        const query = document.getElementById("searchInput").value.toLowerCase();
        const cards = document.querySelectorAll(".card");

        cards.forEach(card => {
          const title = card.querySelector(".card-title").textContent.toLowerCase();
          card.parentElement.style.display = title.includes(query) ? "block" : "none";
        });
      }

      window.onscroll = function () {
        const navbar = document.querySelector('.navbar');
        if (window.scrollY > 50) {
          navbar.classList.add('scrolled');
        } else {
          navbar.classList.remove('scrolled');
        }
      };




    </script>