const Account = require("../models/Account");
const { mutipleMongoose } = require("../../until/mongoose");
const { response } = require("express");
const CircularJSON = require("circular-json");
const session = require("express-session");
const Cart = require("../models/Cart");
const Combo = require("../models/Combo");
const Product = require("../models/Product");
const Box = require("../models/Box");
const Mes = require("../models/Mes");
const CustomBox = require("../models/CustomBox");
const Order = require("../models/Order");
const getCartCount = require("../middlewares/cartCount"); // Import helper

const mongoose = require("mongoose");

class CartController {
    // Add product to cart
    showCustom(req, res) {
        Product.find({}).lean()
            .then((products) => {
                res.render("customGift/customProduct", { products })
            })
            .catch((error) => {
                next(error);
            });
    }


    showCustomBox(req, res) {

        Box.find({}).lean()
            .then((boxs) => {
                res.render("customGift/customBox", { boxs })
            })
            .catch((error) => {
                next(error);
            });
    }

    showCustomMes(req, res) {
        Mes.find({}).lean()
            .then((mess) => {
                res.render("customGift/customMes", { mess })
            })
            .catch((error) => {
                next(error);
            });
    }



    showGuideGift(req, res) {
        Mes.find({}).lean()
            .then((mess) => {
                res.render("customGift/guideGift", { mess })
            })
            .catch((error) => {
                next(error);
            });
    }



    // POST custom-gift/minus
    async minus(req, res) {
        const { itemId } = req.body;
        const userId = req.session.userId;

        if (!userId) {
            return res.status(401).json({
                success: false,
                message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m.",
            });
        }

        if (!itemId) {
            return res.status(400).json({
                success: false,
                message: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m.",
            });
        }

        try {
            let customBox = await CustomBox.findOne({ userId }).populate("items.productId");
            if (!customBox) {
                return res.status(404).json({
                    success: false,
                    message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng c·ªßa b·∫°n.",
                });
            }

            const itemIndex = customBox.items.findIndex(
                (item) => item.productId && item.productId._id.toString() === itemId
            );

            if (itemIndex === -1) {
                const product = await Product.findById(itemId);
                if (!product) {
                    return res.status(404).json({
                        success: false,
                        message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.",
                    });
                }

                const newItem = {
                    productId: itemId,
                    quantity: 0, // Th√™m m·ªõi v·ªõi s·ªë l∆∞·ª£ng ban ƒë·∫ßu = 1
                    price: product.price,
                    name: product.name,
                };
                customBox.items.push(newItem);
            } else {

                const item = customBox.items[itemIndex];

                if (item.quantity >= 1) {
                    item.quantity -= 1;
                    if (item.quantity === 0) {
                        customBox.items.splice(itemIndex, 1);
                    }
                } else {
                    customBox.items.splice(itemIndex, 1); // X√≥a s·∫£n ph·∫©m n·∫øu s·ªë l∆∞·ª£ng = 1
                }
            }
            customBox.totalQuantity = customBox.items.reduce(
                (sum, item) => sum + item.quantity,
                0
            );
            customBox.totalPrice = customBox.items.reduce((sum, item) => {
                const price = parseFloat(item.price.replace(/[^\d]/g, "")) || 0;
                return sum + price * item.quantity;
            }, 0);
            customBox.totalPrice = customBox.totalPrice.toLocaleString("vi-VN") + " VND";

            await customBox.save();
            await customBox.populate("items.productId");
            res.json({
                success: true,
                message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c gi·∫£m th√†nh c√¥ng.",
                customBox: {
                    totalQuantity: customBox.totalQuantity,
                    totalPrice: customBox.totalPrice,
                    items: customBox.items,
                },
            });
        } catch (error) {
            console.error("L·ªói khi gi·∫£m s·∫£n ph·∫©m:", error);
            res.status(500).json({
                success: false,
                message: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu.",
            });
        }
    }










    async plus(req, res) {
        const { itemId } = req.body;
        const userId = req.session.userId;

        if (!userId) {
            return res.status(401).json({
                success: false,
                message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi th√™m s·∫£n ph·∫©m.",
            });
        }

        if (!itemId) {
            return res.status(400).json({
                success: false,
                message: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m.",
            });
        }

        try {
            let customBox = await CustomBox.findOne({ userId }).populate("items.productId");
            if (!customBox) {
                customBox = new CustomBox({
                    userId,
                    items: [],
                    totalQuantity: 0,
                    totalPrice: "0 VND",
                });
                await customBox.save();
            }

            let itemIndex = customBox.items.findIndex(
                (item) => item.productId && item.productId._id.toString() === itemId
            );

            if (itemIndex === -1) {
                const product = await Product.findById(itemId);
                if (!product) {
                    return res.status(404).json({
                        success: false,
                        message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.",
                    });
                }

                const newItem = {
                    productId: itemId,
                    quantity: 1, // Th√™m m·ªõi v·ªõi s·ªë l∆∞·ª£ng ban ƒë·∫ßu = 1
                    price: product.price,
                    name: product.name,
                };
                customBox.items.push(newItem);
            } else {
                customBox.items[itemIndex].quantity += 1;
            }

            customBox.totalQuantity = customBox.items.reduce(
                (sum, item) => sum + item.quantity,
                0
            );
            customBox.totalPrice = customBox.items.reduce((sum, item) => {
                const price = parseFloat(item.price.replace(/[^\d]/g, "")) || 0;
                return sum + price * item.quantity;
            }, 0);
            customBox.totalPrice = customBox.totalPrice.toLocaleString("vi-VN") + " VND";

            await customBox.save();
            await customBox.populate("items.productId");
            res.json({
                success: true,
                message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.",
                customBox: {
                    totalQuantity: customBox.totalQuantity,
                    totalPrice: customBox.totalPrice,
                    items: customBox.items,
                },
            });
        } catch (error) {
            console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
            res.status(500).json({
                success: false,
                message: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu.",
            });
        }
    }



    async resetCart(req, res) {
        const userId = req.session.userId;
        if (!userId) return res.status(401).json({ success: false, message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p." });

        try {
            await CustomBox.findOneAndUpdate(
                { userId },
                { items: [], totalQuantity: 0, totalPrice: "0 VND" }
            );
            res.json({ success: true, message: "Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c reset!" });
        } catch (error) {
            console.error("L·ªói reset gi·ªè h√†ng:", error);
            res.status(500).json({ success: false, message: "L·ªói khi reset gi·ªè h√†ng." });
        }
    }


    async payment(req, res) {
        const userId = req.session.userId;
    
        if (!userId) {
            req.flash('error', 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n.');
            return res.redirect('/account');
        }
    
        try {
            // L·∫•y d·ªØ li·ªáu t·ª´ request body
            const { name, phone, address, email, selectedProducts, selectedBox, selectedCard, personalMessage, totalPrice } = req.body;
    
            // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu JSON th√†nh Object
            const parsedProducts = JSON.parse(selectedProducts);
            const parsedBox = JSON.parse(selectedBox);
            const parsedCard = JSON.parse(selectedCard);
    
            // üõçÔ∏è **T·∫°o danh s√°ch s·∫£n ph·∫©m cho `CustomBox`**
            const customBoxItems = parsedProducts.map(item => ({
                productId: item.productId || null,
                name: item.name,
                quantity: item.quantity,
                price: item.price
            }));
    
            // Th√™m h·ªôp qu√† v√†o danh s√°ch n·∫øu c√≥
            if (parsedBox && parsedBox.name) {
                customBoxItems.push({
                    boxId: null,
                    name: `H·ªôp qu√†: ${parsedBox.name}`,
                    quantity: 1,
                    price: parsedBox.price
                });
            }
    
            // Th√™m thi·ªáp v√†o danh s√°ch n·∫øu c√≥
            if (parsedCard && parsedCard.name) {
                customBoxItems.push({
                    mesId: null,
                    name: `Thi·ªáp: ${parsedCard.name}`,
                    quantity: 1,
                    price: 5000 // Gi√° c·ªë ƒë·ªãnh c·ªßa thi·ªáp
                });
            }
    
            // ‚úÖ **L∆∞u `CustomBox` tr∆∞·ªõc**
            const customBox = new CustomBox({
                userId,
                items: customBoxItems,
                payment: true,
                totalQuantity: customBoxItems.reduce((sum, item) => sum + item.quantity, 0),
                totalPrice: customBoxItems.reduce((sum, item) => sum + parseInt(item.price || 0), 0),
            });
    
            await customBox.save();
            console.log("üéÅ CustomBox ƒë√£ l∆∞u:", customBox);
    
            // ‚úÖ **L∆∞u `Order` v·ªõi danh s√°ch s·∫£n ph·∫©m chi ti·∫øt t·ª´ `CustomBox`**
            const order = new Order({
                userId,
                name,
                phone,
                address,
                email,
                items: customBox.items, // **L∆∞u to√†n b·ªô s·∫£n ph·∫©m t·ª´ `CustomBox`**
                giftBox: parsedBox.name || "Ch∆∞a ch·ªçn",
                card: parsedCard.name || "Ch∆∞a ch·ªçn",
                personalMessage,
                cardPrice:"5000",
                totalPrice: customBox.totalPrice, // ‚úÖ **D√πng t·ªïng gi√° t·ª´ `CustomBox`**
            });
    
            await order.save();
            console.log("üì¶ ƒê∆°n h√†ng ƒë√£ l∆∞u:", order);
    
            // ‚úÖ **X√≥a gi·ªè h√†ng sau khi thanh to√°n**
            await Cart.findOneAndDelete({ userId, payment: false });
    
            req.flash('success', 'Thanh to√°n th√†nh c√¥ng!');
            res.redirect('/');
        } catch (error) {
            console.error('L·ªói khi thanh to√°n:', error);
            req.flash('error', 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh thanh to√°n.');
            res.status(500).redirect('/cart');
        }
    }
    



}


module.exports = new CartController();
